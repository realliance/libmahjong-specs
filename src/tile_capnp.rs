// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: tile/tile.capnp


#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Tile {
  None = 0,
  PinOne = 1,
  PinTwo = 2,
  PinThree = 3,
  PinFour = 4,
  PinFive = 5,
  PinRedFive = 6,
  PinSix = 7,
  PinSeven = 8,
  PinEight = 9,
  PinNine = 10,
  SouOne = 11,
  SouTwo = 12,
  SouThree = 13,
  SouFour = 14,
  SouFive = 15,
  SouRedFive = 16,
  SouSix = 17,
  SouSeven = 18,
  SouEight = 19,
  SouNine = 20,
  ManOne = 21,
  ManTwo = 22,
  ManThree = 23,
  ManFour = 24,
  ManFive = 25,
  ManRedFive = 26,
  ManSix = 27,
  ManSeven = 28,
  ManEight = 29,
  ManNine = 30,
  HonorEast = 31,
  HonorSouth = 32,
  HonorWest = 33,
  HonorNorth = 34,
  HonorRedDragon = 35,
  HonorWhiteDragon = 36,
  HonorGreenDragon = 37,
}

impl ::capnp::introspect::Introspect for Tile {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &tile::ENCODED_NODE, annotation_types: tile::get_annotation_types }).into() }
}
impl ::core::convert::From<Tile> for ::capnp::dynamic_value::Reader<'_> {
  fn from(e: Tile) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &tile::ENCODED_NODE, annotation_types: tile::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for Tile {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <Tile as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::None),
      1 => ::core::result::Result::Ok(Self::PinOne),
      2 => ::core::result::Result::Ok(Self::PinTwo),
      3 => ::core::result::Result::Ok(Self::PinThree),
      4 => ::core::result::Result::Ok(Self::PinFour),
      5 => ::core::result::Result::Ok(Self::PinFive),
      6 => ::core::result::Result::Ok(Self::PinRedFive),
      7 => ::core::result::Result::Ok(Self::PinSix),
      8 => ::core::result::Result::Ok(Self::PinSeven),
      9 => ::core::result::Result::Ok(Self::PinEight),
      10 => ::core::result::Result::Ok(Self::PinNine),
      11 => ::core::result::Result::Ok(Self::SouOne),
      12 => ::core::result::Result::Ok(Self::SouTwo),
      13 => ::core::result::Result::Ok(Self::SouThree),
      14 => ::core::result::Result::Ok(Self::SouFour),
      15 => ::core::result::Result::Ok(Self::SouFive),
      16 => ::core::result::Result::Ok(Self::SouRedFive),
      17 => ::core::result::Result::Ok(Self::SouSix),
      18 => ::core::result::Result::Ok(Self::SouSeven),
      19 => ::core::result::Result::Ok(Self::SouEight),
      20 => ::core::result::Result::Ok(Self::SouNine),
      21 => ::core::result::Result::Ok(Self::ManOne),
      22 => ::core::result::Result::Ok(Self::ManTwo),
      23 => ::core::result::Result::Ok(Self::ManThree),
      24 => ::core::result::Result::Ok(Self::ManFour),
      25 => ::core::result::Result::Ok(Self::ManFive),
      26 => ::core::result::Result::Ok(Self::ManRedFive),
      27 => ::core::result::Result::Ok(Self::ManSix),
      28 => ::core::result::Result::Ok(Self::ManSeven),
      29 => ::core::result::Result::Ok(Self::ManEight),
      30 => ::core::result::Result::Ok(Self::ManNine),
      31 => ::core::result::Result::Ok(Self::HonorEast),
      32 => ::core::result::Result::Ok(Self::HonorSouth),
      33 => ::core::result::Result::Ok(Self::HonorWest),
      34 => ::core::result::Result::Ok(Self::HonorNorth),
      35 => ::core::result::Result::Ok(Self::HonorRedDragon),
      36 => ::core::result::Result::Ok(Self::HonorWhiteDragon),
      37 => ::core::result::Result::Ok(Self::HonorGreenDragon),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<Tile> for u16 {
  #[inline]
  fn from(x: Tile) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for Tile {
  const TYPE_ID: u64 = 0xfee7_4eff_bff1_f44fu64;
}
mod tile {
pub static ENCODED_NODE: [::capnp::Word; 190] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(79, 244, 241, 191, 255, 78, 231, 254),
  ::capnp::word(16, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(179, 102, 105, 64, 172, 102, 76, 219),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 170, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 151, 3, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(116, 105, 108, 101, 47, 116, 105, 108),
  ::capnp::word(101, 46, 99, 97, 112, 110, 112, 58),
  ::capnp::word(84, 105, 108, 101, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(152, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(193, 1, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(185, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(177, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(169, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(165, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(157, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(149, 1, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(145, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(137, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(133, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(129, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(121, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(113, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(105, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(101, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(93, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(85, 1, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(17, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(81, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(18, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(73, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(19, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(69, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(20, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(65, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(57, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(22, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(49, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(23, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(41, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(24, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(37, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(26, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 1, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(27, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(17, 1, 0, 0, 58, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(28, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(9, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(5, 1, 0, 0, 74, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(30, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 1, 0, 0, 66, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(31, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(249, 0, 0, 0, 82, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(32, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(245, 0, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(241, 0, 0, 0, 82, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(34, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(237, 0, 0, 0, 90, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(35, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(233, 0, 0, 0, 122, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(36, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(229, 0, 0, 0, 138, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(37, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(229, 0, 0, 0, 138, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(110, 111, 110, 101, 0, 0, 0, 0),
  ::capnp::word(112, 105, 110, 79, 110, 101, 0, 0),
  ::capnp::word(112, 105, 110, 84, 119, 111, 0, 0),
  ::capnp::word(112, 105, 110, 84, 104, 114, 101, 101),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(112, 105, 110, 70, 111, 117, 114, 0),
  ::capnp::word(112, 105, 110, 70, 105, 118, 101, 0),
  ::capnp::word(112, 105, 110, 82, 101, 100, 70, 105),
  ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
  ::capnp::word(112, 105, 110, 83, 105, 120, 0, 0),
  ::capnp::word(112, 105, 110, 83, 101, 118, 101, 110),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(112, 105, 110, 69, 105, 103, 104, 116),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(112, 105, 110, 78, 105, 110, 101, 0),
  ::capnp::word(115, 111, 117, 79, 110, 101, 0, 0),
  ::capnp::word(115, 111, 117, 84, 119, 111, 0, 0),
  ::capnp::word(115, 111, 117, 84, 104, 114, 101, 101),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(115, 111, 117, 70, 111, 117, 114, 0),
  ::capnp::word(115, 111, 117, 70, 105, 118, 101, 0),
  ::capnp::word(115, 111, 117, 82, 101, 100, 70, 105),
  ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
  ::capnp::word(115, 111, 117, 83, 105, 120, 0, 0),
  ::capnp::word(115, 111, 117, 83, 101, 118, 101, 110),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(115, 111, 117, 69, 105, 103, 104, 116),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(115, 111, 117, 78, 105, 110, 101, 0),
  ::capnp::word(109, 97, 110, 79, 110, 101, 0, 0),
  ::capnp::word(109, 97, 110, 84, 119, 111, 0, 0),
  ::capnp::word(109, 97, 110, 84, 104, 114, 101, 101),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(109, 97, 110, 70, 111, 117, 114, 0),
  ::capnp::word(109, 97, 110, 70, 105, 118, 101, 0),
  ::capnp::word(109, 97, 110, 82, 101, 100, 70, 105),
  ::capnp::word(118, 101, 0, 0, 0, 0, 0, 0),
  ::capnp::word(109, 97, 110, 83, 105, 120, 0, 0),
  ::capnp::word(109, 97, 110, 83, 101, 118, 101, 110),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(109, 97, 110, 69, 105, 103, 104, 116),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(109, 97, 110, 78, 105, 110, 101, 0),
  ::capnp::word(104, 111, 110, 111, 114, 69, 97, 115),
  ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 83, 111, 117),
  ::capnp::word(116, 104, 0, 0, 0, 0, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 87, 101, 115),
  ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 78, 111, 114),
  ::capnp::word(116, 104, 0, 0, 0, 0, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 82, 101, 100),
  ::capnp::word(68, 114, 97, 103, 111, 110, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 87, 104, 105),
  ::capnp::word(116, 101, 68, 114, 97, 103, 111, 110),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(104, 111, 110, 111, 114, 71, 114, 101),
  ::capnp::word(101, 110, 68, 114, 97, 103, 111, 110),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}
