// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: queue_request.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(957a4f7f0f0c1a95);
enum class PlayerType_957a4f7f0f0c1a95: uint16_t {
  HUMAN,
  BOT,
};
CAPNP_DECLARE_ENUM(PlayerType, 957a4f7f0f0c1a95);
CAPNP_DECLARE_SCHEMA(bd8c8f8a5971810e);
enum class LobbyType_bd8c8f8a5971810e: uint16_t {
  ALL_BOT,
  GENERAL,
};
CAPNP_DECLARE_ENUM(LobbyType, bd8c8f8a5971810e);
CAPNP_DECLARE_SCHEMA(ad09a70b99c98959);
CAPNP_DECLARE_SCHEMA(d5260a86829e31dc);

}  // namespace schemas
}  // namespace capnp


typedef ::capnp::schemas::PlayerType_957a4f7f0f0c1a95 PlayerType;

typedef ::capnp::schemas::LobbyType_bd8c8f8a5971810e LobbyType;

struct PlayerRating {
  PlayerRating() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad09a70b99c98959, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct QueueRequest {
  QueueRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d5260a86829e31dc, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlayerRating::Reader {
public:
  typedef PlayerRating Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getRating() const;

  inline double getUncertainty() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerRating::Builder {
public:
  typedef PlayerRating Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getRating();
  inline void setRating(double value);

  inline double getUncertainty();
  inline void setUncertainty(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerRating::Pipeline {
public:
  typedef PlayerRating Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class QueueRequest::Reader {
public:
  typedef QueueRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId() const;
  inline  ::capnp::Text::Reader getPlayerId() const;

  inline  ::PlayerType getPlayerType() const;

  inline  ::LobbyType getLobbyType() const;

  inline bool hasCurrentRating() const;
  inline  ::PlayerRating::Reader getCurrentRating() const;

  inline  ::uint64_t getTimestampMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueueRequest::Builder {
public:
  typedef QueueRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId();
  inline  ::capnp::Text::Builder getPlayerId();
  inline void setPlayerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlayerId(unsigned int size);
  inline void adoptPlayerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlayerId();

  inline  ::PlayerType getPlayerType();
  inline void setPlayerType( ::PlayerType value);

  inline  ::LobbyType getLobbyType();
  inline void setLobbyType( ::LobbyType value);

  inline bool hasCurrentRating();
  inline  ::PlayerRating::Builder getCurrentRating();
  inline void setCurrentRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initCurrentRating();
  inline void adoptCurrentRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownCurrentRating();

  inline  ::uint64_t getTimestampMs();
  inline void setTimestampMs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueueRequest::Pipeline {
public:
  typedef QueueRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PlayerRating::Pipeline getCurrentRating();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline double PlayerRating::Reader::getRating() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double PlayerRating::Builder::getRating() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerRating::Builder::setRating(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double PlayerRating::Reader::getUncertainty() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PlayerRating::Builder::getUncertainty() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerRating::Builder::setUncertainty(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QueueRequest::Reader::hasPlayerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueueRequest::Builder::hasPlayerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueueRequest::Reader::getPlayerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueueRequest::Builder::getPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueueRequest::Builder::setPlayerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueueRequest::Builder::initPlayerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueueRequest::Builder::adoptPlayerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueueRequest::Builder::disownPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::PlayerType QueueRequest::Reader::getPlayerType() const {
  return _reader.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::PlayerType QueueRequest::Builder::getPlayerType() {
  return _builder.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueueRequest::Builder::setPlayerType( ::PlayerType value) {
  _builder.setDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::LobbyType QueueRequest::Reader::getLobbyType() const {
  return _reader.getDataField< ::LobbyType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::LobbyType QueueRequest::Builder::getLobbyType() {
  return _builder.getDataField< ::LobbyType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QueueRequest::Builder::setLobbyType( ::LobbyType value) {
  _builder.setDataField< ::LobbyType>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool QueueRequest::Reader::hasCurrentRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueueRequest::Builder::hasCurrentRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader QueueRequest::Reader::getCurrentRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder QueueRequest::Builder::getCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline QueueRequest::Pipeline::getCurrentRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void QueueRequest::Builder::setCurrentRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder QueueRequest::Builder::initCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueueRequest::Builder::adoptCurrentRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> QueueRequest::Builder::disownCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t QueueRequest::Reader::getTimestampMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QueueRequest::Builder::getTimestampMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QueueRequest::Builder::setTimestampMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

