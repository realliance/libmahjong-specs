// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: player_joined_lobby.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "queue_player.capnp.h"
#include "queue_request.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(869e7ad1ef356063);

}  // namespace schemas
}  // namespace capnp


struct PlayerJoinedLobby {
  PlayerJoinedLobby() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(869e7ad1ef356063, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlayerJoinedLobby::Reader {
public:
  typedef PlayerJoinedLobby Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLobbyId() const;
  inline  ::capnp::Data::Reader getLobbyId() const;

  inline bool hasPlayerId() const;
  inline  ::capnp::Text::Reader getPlayerId() const;

  inline  ::PlayerType getPlayerType() const;

  inline bool hasCurrentPlayers() const;
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader getCurrentPlayers() const;

  inline  ::uint64_t getTimestampMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerJoinedLobby::Builder {
public:
  typedef PlayerJoinedLobby Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLobbyId();
  inline  ::capnp::Data::Builder getLobbyId();
  inline void setLobbyId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLobbyId(unsigned int size);
  inline void adoptLobbyId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLobbyId();

  inline bool hasPlayerId();
  inline  ::capnp::Text::Builder getPlayerId();
  inline void setPlayerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlayerId(unsigned int size);
  inline void adoptPlayerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlayerId();

  inline  ::PlayerType getPlayerType();
  inline void setPlayerType( ::PlayerType value);

  inline bool hasCurrentPlayers();
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder getCurrentPlayers();
  inline void setCurrentPlayers( ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder initCurrentPlayers(unsigned int size);
  inline void adoptCurrentPlayers(::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>> disownCurrentPlayers();

  inline  ::uint64_t getTimestampMs();
  inline void setTimestampMs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerJoinedLobby::Pipeline {
public:
  typedef PlayerJoinedLobby Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PlayerJoinedLobby::Reader::hasLobbyId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerJoinedLobby::Builder::hasLobbyId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader PlayerJoinedLobby::Reader::getLobbyId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder PlayerJoinedLobby::Builder::getLobbyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerJoinedLobby::Builder::setLobbyId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder PlayerJoinedLobby::Builder::initLobbyId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerJoinedLobby::Builder::adoptLobbyId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> PlayerJoinedLobby::Builder::disownLobbyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerJoinedLobby::Reader::hasPlayerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerJoinedLobby::Builder::hasPlayerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlayerJoinedLobby::Reader::getPlayerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlayerJoinedLobby::Builder::getPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerJoinedLobby::Builder::setPlayerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlayerJoinedLobby::Builder::initPlayerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void PlayerJoinedLobby::Builder::adoptPlayerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlayerJoinedLobby::Builder::disownPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::PlayerType PlayerJoinedLobby::Reader::getPlayerType() const {
  return _reader.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::PlayerType PlayerJoinedLobby::Builder::getPlayerType() {
  return _builder.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerJoinedLobby::Builder::setPlayerType( ::PlayerType value) {
  _builder.setDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerJoinedLobby::Reader::hasCurrentPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerJoinedLobby::Builder::hasCurrentPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader PlayerJoinedLobby::Reader::getCurrentPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder PlayerJoinedLobby::Builder::getCurrentPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlayerJoinedLobby::Builder::setCurrentPlayers( ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder PlayerJoinedLobby::Builder::initCurrentPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void PlayerJoinedLobby::Builder::adoptCurrentPlayers(
    ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>> PlayerJoinedLobby::Builder::disownCurrentPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::uint64_t PlayerJoinedLobby::Reader::getTimestampMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t PlayerJoinedLobby::Builder::getTimestampMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerJoinedLobby::Builder::setTimestampMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

