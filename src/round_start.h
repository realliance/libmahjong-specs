// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: round_start.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../tile/tile.capnp.h"
#include "../winds.capnp.h"
#include "player.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(9abf007155c6741f);

}  // namespace schemas
}  // namespace capnp


struct RoundStart {
  RoundStart() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9abf007155c6741f, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RoundStart::Reader {
public:
  typedef RoundStart Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasHand() const;
  inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Reader getHand() const;

  inline  ::Wind getSeatWind() const;

  inline  ::Wind getPrevailingWind() const;

  inline bool hasPlayers() const;
  inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Reader getPlayers() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RoundStart::Builder {
public:
  typedef RoundStart Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasHand();
  inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Builder getHand();
  inline void setHand( ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Reader value);
  inline void setHand(::kj::ArrayPtr<const  ::Tile> value);
  inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Builder initHand(unsigned int size);
  inline void adoptHand(::capnp::Orphan< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>> disownHand();

  inline  ::Wind getSeatWind();
  inline void setSeatWind( ::Wind value);

  inline  ::Wind getPrevailingWind();
  inline void setPrevailingWind( ::Wind value);

  inline bool hasPlayers();
  inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Builder getPlayers();
  inline void setPlayers( ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Builder initPlayers(unsigned int size);
  inline void adoptPlayers(::capnp::Orphan< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>> disownPlayers();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RoundStart::Pipeline {
public:
  typedef RoundStart Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool RoundStart::Reader::hasHand() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RoundStart::Builder::hasHand() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Reader RoundStart::Reader::getHand() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Builder RoundStart::Builder::getHand() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RoundStart::Builder::setHand( ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline void RoundStart::Builder::setHand(::kj::ArrayPtr<const  ::Tile> value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>::Builder RoundStart::Builder::initHand(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RoundStart::Builder::adoptHand(
    ::capnp::Orphan< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>> RoundStart::Builder::disownHand() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Tile,  ::capnp::Kind::ENUM>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::Wind RoundStart::Reader::getSeatWind() const {
  return _reader.getDataField< ::Wind>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Wind RoundStart::Builder::getSeatWind() {
  return _builder.getDataField< ::Wind>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RoundStart::Builder::setSeatWind( ::Wind value) {
  _builder.setDataField< ::Wind>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::Wind RoundStart::Reader::getPrevailingWind() const {
  return _reader.getDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::Wind RoundStart::Builder::getPrevailingWind() {
  return _builder.getDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RoundStart::Builder::setPrevailingWind( ::Wind value) {
  _builder.setDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RoundStart::Reader::hasPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RoundStart::Builder::hasPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Reader RoundStart::Reader::getPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Builder RoundStart::Builder::getPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RoundStart::Builder::setPlayers( ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>::Builder RoundStart::Builder::initPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RoundStart::Builder::adoptPlayers(
    ::capnp::Orphan< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>> RoundStart::Builder::disownPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Player,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

