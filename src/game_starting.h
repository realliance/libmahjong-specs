// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: game_starting.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "queue_player.capnp.h"
#include "queue_request.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(be157bb4a6a24ab1);
CAPNP_DECLARE_SCHEMA(9fe1ba2d3ce5a5bf);
CAPNP_DECLARE_SCHEMA(d82fb7c6d0b27718);
CAPNP_DECLARE_SCHEMA(ad50140ba78985ea);

}  // namespace schemas
}  // namespace capnp


struct RatingScenario {
  RatingScenario() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(be157bb4a6a24ab1, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct PlayerRatingRange {
  PlayerRatingRange() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9fe1ba2d3ce5a5bf, 2, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct RatingScenariosTable {
  RatingScenariosTable() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d82fb7c6d0b27718, 0, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GameStarting {
  GameStarting() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ad50140ba78985ea, 1, 4)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class RatingScenario::Reader {
public:
  typedef RatingScenario Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId() const;
  inline  ::capnp::Text::Reader getPlayerId() const;

  inline  ::uint32_t getRank() const;

  inline bool hasCurrentRating() const;
  inline  ::PlayerRating::Reader getCurrentRating() const;

  inline bool hasPredictedRating() const;
  inline  ::PlayerRating::Reader getPredictedRating() const;

  inline double getRatingDelta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RatingScenario::Builder {
public:
  typedef RatingScenario Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId();
  inline  ::capnp::Text::Builder getPlayerId();
  inline void setPlayerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlayerId(unsigned int size);
  inline void adoptPlayerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlayerId();

  inline  ::uint32_t getRank();
  inline void setRank( ::uint32_t value);

  inline bool hasCurrentRating();
  inline  ::PlayerRating::Builder getCurrentRating();
  inline void setCurrentRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initCurrentRating();
  inline void adoptCurrentRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownCurrentRating();

  inline bool hasPredictedRating();
  inline  ::PlayerRating::Builder getPredictedRating();
  inline void setPredictedRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initPredictedRating();
  inline void adoptPredictedRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownPredictedRating();

  inline double getRatingDelta();
  inline void setRatingDelta(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RatingScenario::Pipeline {
public:
  typedef RatingScenario Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PlayerRating::Pipeline getCurrentRating();
  inline  ::PlayerRating::Pipeline getPredictedRating();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class PlayerRatingRange::Reader {
public:
  typedef PlayerRatingRange Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId() const;
  inline  ::capnp::Text::Reader getPlayerId() const;

  inline bool hasCurrentRating() const;
  inline  ::PlayerRating::Reader getCurrentRating() const;

  inline bool hasBestCaseRating() const;
  inline  ::PlayerRating::Reader getBestCaseRating() const;

  inline bool hasWorstCaseRating() const;
  inline  ::PlayerRating::Reader getWorstCaseRating() const;

  inline double getMaxGain() const;

  inline double getMaxLoss() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerRatingRange::Builder {
public:
  typedef PlayerRatingRange Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId();
  inline  ::capnp::Text::Builder getPlayerId();
  inline void setPlayerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlayerId(unsigned int size);
  inline void adoptPlayerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlayerId();

  inline bool hasCurrentRating();
  inline  ::PlayerRating::Builder getCurrentRating();
  inline void setCurrentRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initCurrentRating();
  inline void adoptCurrentRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownCurrentRating();

  inline bool hasBestCaseRating();
  inline  ::PlayerRating::Builder getBestCaseRating();
  inline void setBestCaseRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initBestCaseRating();
  inline void adoptBestCaseRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownBestCaseRating();

  inline bool hasWorstCaseRating();
  inline  ::PlayerRating::Builder getWorstCaseRating();
  inline void setWorstCaseRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initWorstCaseRating();
  inline void adoptWorstCaseRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownWorstCaseRating();

  inline double getMaxGain();
  inline void setMaxGain(double value);

  inline double getMaxLoss();
  inline void setMaxLoss(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerRatingRange::Pipeline {
public:
  typedef PlayerRatingRange Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PlayerRating::Pipeline getCurrentRating();
  inline  ::PlayerRating::Pipeline getBestCaseRating();
  inline  ::PlayerRating::Pipeline getWorstCaseRating();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class RatingScenariosTable::Reader {
public:
  typedef RatingScenariosTable Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasScenarios() const;
  inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Reader getScenarios() const;

  inline bool hasPlayerRanges() const;
  inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Reader getPlayerRanges() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class RatingScenariosTable::Builder {
public:
  typedef RatingScenariosTable Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasScenarios();
  inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Builder getScenarios();
  inline void setScenarios( ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Builder initScenarios(unsigned int size);
  inline void adoptScenarios(::capnp::Orphan< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>> disownScenarios();

  inline bool hasPlayerRanges();
  inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Builder getPlayerRanges();
  inline void setPlayerRanges( ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Builder initPlayerRanges(unsigned int size);
  inline void adoptPlayerRanges(::capnp::Orphan< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>> disownPlayerRanges();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class RatingScenariosTable::Pipeline {
public:
  typedef RatingScenariosTable Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GameStarting::Reader {
public:
  typedef GameStarting Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasLobbyId() const;
  inline  ::capnp::Data::Reader getLobbyId() const;

  inline bool hasGameId() const;
  inline  ::capnp::Data::Reader getGameId() const;

  inline bool hasPlayers() const;
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader getPlayers() const;

  inline bool hasRatingScenarios() const;
  inline  ::RatingScenariosTable::Reader getRatingScenarios() const;

  inline  ::uint64_t getTimestampMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GameStarting::Builder {
public:
  typedef GameStarting Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasLobbyId();
  inline  ::capnp::Data::Builder getLobbyId();
  inline void setLobbyId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initLobbyId(unsigned int size);
  inline void adoptLobbyId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownLobbyId();

  inline bool hasGameId();
  inline  ::capnp::Data::Builder getGameId();
  inline void setGameId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initGameId(unsigned int size);
  inline void adoptGameId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownGameId();

  inline bool hasPlayers();
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder getPlayers();
  inline void setPlayers( ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder initPlayers(unsigned int size);
  inline void adoptPlayers(::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>> disownPlayers();

  inline bool hasRatingScenarios();
  inline  ::RatingScenariosTable::Builder getRatingScenarios();
  inline void setRatingScenarios( ::RatingScenariosTable::Reader value);
  inline  ::RatingScenariosTable::Builder initRatingScenarios();
  inline void adoptRatingScenarios(::capnp::Orphan< ::RatingScenariosTable>&& value);
  inline ::capnp::Orphan< ::RatingScenariosTable> disownRatingScenarios();

  inline  ::uint64_t getTimestampMs();
  inline void setTimestampMs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GameStarting::Pipeline {
public:
  typedef GameStarting Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::RatingScenariosTable::Pipeline getRatingScenarios();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool RatingScenario::Reader::hasPlayerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RatingScenario::Builder::hasPlayerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader RatingScenario::Reader::getPlayerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder RatingScenario::Builder::getPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RatingScenario::Builder::setPlayerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder RatingScenario::Builder::initPlayerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RatingScenario::Builder::adoptPlayerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> RatingScenario::Builder::disownPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t RatingScenario::Reader::getRank() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t RatingScenario::Builder::getRank() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void RatingScenario::Builder::setRank( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool RatingScenario::Reader::hasCurrentRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RatingScenario::Builder::hasCurrentRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader RatingScenario::Reader::getCurrentRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder RatingScenario::Builder::getCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline RatingScenario::Pipeline::getCurrentRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void RatingScenario::Builder::setCurrentRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder RatingScenario::Builder::initCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RatingScenario::Builder::adoptCurrentRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> RatingScenario::Builder::disownCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool RatingScenario::Reader::hasPredictedRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool RatingScenario::Builder::hasPredictedRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader RatingScenario::Reader::getPredictedRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder RatingScenario::Builder::getPredictedRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline RatingScenario::Pipeline::getPredictedRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void RatingScenario::Builder::setPredictedRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder RatingScenario::Builder::initPredictedRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void RatingScenario::Builder::adoptPredictedRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> RatingScenario::Builder::disownPredictedRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double RatingScenario::Reader::getRatingDelta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double RatingScenario::Builder::getRatingDelta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void RatingScenario::Builder::setRatingDelta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerRatingRange::Reader::hasPlayerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerRatingRange::Builder::hasPlayerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlayerRatingRange::Reader::getPlayerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlayerRatingRange::Builder::getPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerRatingRange::Builder::setPlayerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlayerRatingRange::Builder::initPlayerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerRatingRange::Builder::adoptPlayerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlayerRatingRange::Builder::disownPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool PlayerRatingRange::Reader::hasCurrentRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerRatingRange::Builder::hasCurrentRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader PlayerRatingRange::Reader::getCurrentRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::getCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline PlayerRatingRange::Pipeline::getCurrentRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlayerRatingRange::Builder::setCurrentRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::initCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerRatingRange::Builder::adoptCurrentRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> PlayerRatingRange::Builder::disownCurrentRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlayerRatingRange::Reader::hasBestCaseRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerRatingRange::Builder::hasBestCaseRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader PlayerRatingRange::Reader::getBestCaseRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::getBestCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline PlayerRatingRange::Pipeline::getBestCaseRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlayerRatingRange::Builder::setBestCaseRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::initBestCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlayerRatingRange::Builder::adoptBestCaseRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> PlayerRatingRange::Builder::disownBestCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool PlayerRatingRange::Reader::hasWorstCaseRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerRatingRange::Builder::hasWorstCaseRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader PlayerRatingRange::Reader::getWorstCaseRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::getWorstCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline PlayerRatingRange::Pipeline::getWorstCaseRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void PlayerRatingRange::Builder::setWorstCaseRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder PlayerRatingRange::Builder::initWorstCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void PlayerRatingRange::Builder::adoptWorstCaseRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> PlayerRatingRange::Builder::disownWorstCaseRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline double PlayerRatingRange::Reader::getMaxGain() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double PlayerRatingRange::Builder::getMaxGain() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerRatingRange::Builder::setMaxGain(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline double PlayerRatingRange::Reader::getMaxLoss() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PlayerRatingRange::Builder::getMaxLoss() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerRatingRange::Builder::setMaxLoss(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool RatingScenariosTable::Reader::hasScenarios() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool RatingScenariosTable::Builder::hasScenarios() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Reader RatingScenariosTable::Reader::getScenarios() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Builder RatingScenariosTable::Builder::getScenarios() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void RatingScenariosTable::Builder::setScenarios( ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>::Builder RatingScenariosTable::Builder::initScenarios(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void RatingScenariosTable::Builder::adoptScenarios(
    ::capnp::Orphan< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>> RatingScenariosTable::Builder::disownScenarios() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::RatingScenario,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool RatingScenariosTable::Reader::hasPlayerRanges() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool RatingScenariosTable::Builder::hasPlayerRanges() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Reader RatingScenariosTable::Reader::getPlayerRanges() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Builder RatingScenariosTable::Builder::getPlayerRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void RatingScenariosTable::Builder::setPlayerRanges( ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>::Builder RatingScenariosTable::Builder::initPlayerRanges(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void RatingScenariosTable::Builder::adoptPlayerRanges(
    ::capnp::Orphan< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>> RatingScenariosTable::Builder::disownPlayerRanges() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerRatingRange,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GameStarting::Reader::hasLobbyId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GameStarting::Builder::hasLobbyId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GameStarting::Reader::getLobbyId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GameStarting::Builder::getLobbyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GameStarting::Builder::setLobbyId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GameStarting::Builder::initLobbyId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GameStarting::Builder::adoptLobbyId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GameStarting::Builder::disownLobbyId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool GameStarting::Reader::hasGameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GameStarting::Builder::hasGameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GameStarting::Reader::getGameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GameStarting::Builder::getGameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GameStarting::Builder::setGameId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GameStarting::Builder::initGameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GameStarting::Builder::adoptGameId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GameStarting::Builder::disownGameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool GameStarting::Reader::hasPlayers() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool GameStarting::Builder::hasPlayers() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader GameStarting::Reader::getPlayers() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder GameStarting::Builder::getPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void GameStarting::Builder::setPlayers( ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>::Builder GameStarting::Builder::initPlayers(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void GameStarting::Builder::adoptPlayers(
    ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>> GameStarting::Builder::disownPlayers() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::QueuePlayer,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool GameStarting::Reader::hasRatingScenarios() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool GameStarting::Builder::hasRatingScenarios() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::RatingScenariosTable::Reader GameStarting::Reader::getRatingScenarios() const {
  return ::capnp::_::PointerHelpers< ::RatingScenariosTable>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::RatingScenariosTable::Builder GameStarting::Builder::getRatingScenarios() {
  return ::capnp::_::PointerHelpers< ::RatingScenariosTable>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::RatingScenariosTable::Pipeline GameStarting::Pipeline::getRatingScenarios() {
  return  ::RatingScenariosTable::Pipeline(_typeless.getPointerField(3));
}
#endif  // !CAPNP_LITE
inline void GameStarting::Builder::setRatingScenarios( ::RatingScenariosTable::Reader value) {
  ::capnp::_::PointerHelpers< ::RatingScenariosTable>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::RatingScenariosTable::Builder GameStarting::Builder::initRatingScenarios() {
  return ::capnp::_::PointerHelpers< ::RatingScenariosTable>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void GameStarting::Builder::adoptRatingScenarios(
    ::capnp::Orphan< ::RatingScenariosTable>&& value) {
  ::capnp::_::PointerHelpers< ::RatingScenariosTable>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::RatingScenariosTable> GameStarting::Builder::disownRatingScenarios() {
  return ::capnp::_::PointerHelpers< ::RatingScenariosTable>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline  ::uint64_t GameStarting::Reader::getTimestampMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GameStarting::Builder::getTimestampMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GameStarting::Builder::setTimestampMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

