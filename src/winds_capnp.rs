// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: winds.capnp


#[repr(u16)]
#[derive(Clone, Copy, Debug, PartialEq, Eq)]
pub enum Wind {
  East = 0,
  South = 1,
  West = 2,
  North = 3,
}

impl ::capnp::introspect::Introspect for Wind {
  fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &wind::ENCODED_NODE, annotation_types: wind::get_annotation_types }).into() }
}
impl ::core::convert::From<Wind> for ::capnp::dynamic_value::Reader<'_> {
  fn from(e: Wind) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &wind::ENCODED_NODE, annotation_types: wind::get_annotation_types }.into()).into() }
}
impl ::core::convert::TryFrom<u16> for Wind {
  type Error = ::capnp::NotInSchema;
  fn try_from(value: u16) -> ::core::result::Result<Self, <Wind as ::core::convert::TryFrom<u16>>::Error> {
    match value {
      0 => ::core::result::Result::Ok(Self::East),
      1 => ::core::result::Result::Ok(Self::South),
      2 => ::core::result::Result::Ok(Self::West),
      3 => ::core::result::Result::Ok(Self::North),
      n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
    }
  }
}
impl From<Wind> for u16 {
  #[inline]
  fn from(x: Wind) -> u16 { x as u16 }
}
impl ::capnp::traits::HasTypeId for Wind {
  const TYPE_ID: u64 = 0x9fc6_869a_bdc1_89f0u64;
}
mod wind {
pub static ENCODED_NODE: [::capnp::Word; 33] = [
  ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
  ::capnp::word(240, 137, 193, 189, 154, 134, 198, 159),
  ::capnp::word(12, 0, 0, 0, 2, 0, 0, 0),
  ::capnp::word(121, 55, 98, 249, 22, 70, 100, 147),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(21, 0, 0, 0, 138, 0, 0, 0),
  ::capnp::word(29, 0, 0, 0, 7, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 103, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(119, 105, 110, 100, 115, 46, 99, 97),
  ::capnp::word(112, 110, 112, 58, 87, 105, 110, 100),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
  ::capnp::word(16, 0, 0, 0, 1, 0, 2, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(41, 0, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(33, 0, 0, 0, 50, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(25, 0, 0, 0, 42, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(17, 0, 0, 0, 50, 0, 0, 0),
  ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
  ::capnp::word(101, 97, 115, 116, 0, 0, 0, 0),
  ::capnp::word(115, 111, 117, 116, 104, 0, 0, 0),
  ::capnp::word(119, 101, 115, 116, 0, 0, 0, 0),
  ::capnp::word(110, 111, 114, 116, 104, 0, 0, 0),
];
pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
  panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
}
}
