// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: queue_player.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "queue_request.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(86989cbd01c35ec2);

}  // namespace schemas
}  // namespace capnp


struct QueuePlayer {
  QueuePlayer() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86989cbd01c35ec2, 2, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class QueuePlayer::Reader {
public:
  typedef QueuePlayer Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasId() const;
  inline  ::capnp::Text::Reader getId() const;

  inline  ::PlayerType getPlayerType() const;

  inline bool hasRating() const;
  inline  ::PlayerRating::Reader getRating() const;

  inline  ::uint64_t getJoinedAtMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class QueuePlayer::Builder {
public:
  typedef QueuePlayer Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasId();
  inline  ::capnp::Text::Builder getId();
  inline void setId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initId(unsigned int size);
  inline void adoptId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownId();

  inline  ::PlayerType getPlayerType();
  inline void setPlayerType( ::PlayerType value);

  inline bool hasRating();
  inline  ::PlayerRating::Builder getRating();
  inline void setRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initRating();
  inline void adoptRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownRating();

  inline  ::uint64_t getJoinedAtMs();
  inline void setJoinedAtMs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class QueuePlayer::Pipeline {
public:
  typedef QueuePlayer Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PlayerRating::Pipeline getRating();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool QueuePlayer::Reader::hasId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool QueuePlayer::Builder::hasId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader QueuePlayer::Reader::getId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder QueuePlayer::Builder::getId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void QueuePlayer::Builder::setId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder QueuePlayer::Builder::initId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void QueuePlayer::Builder::adoptId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> QueuePlayer::Builder::disownId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::PlayerType QueuePlayer::Reader::getPlayerType() const {
  return _reader.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::PlayerType QueuePlayer::Builder::getPlayerType() {
  return _builder.getDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void QueuePlayer::Builder::setPlayerType( ::PlayerType value) {
  _builder.setDataField< ::PlayerType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool QueuePlayer::Reader::hasRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool QueuePlayer::Builder::hasRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader QueuePlayer::Reader::getRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder QueuePlayer::Builder::getRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline QueuePlayer::Pipeline::getRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void QueuePlayer::Builder::setRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder QueuePlayer::Builder::initRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void QueuePlayer::Builder::adoptRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> QueuePlayer::Builder::disownRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t QueuePlayer::Reader::getJoinedAtMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t QueuePlayer::Builder::getJoinedAtMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void QueuePlayer::Builder::setJoinedAtMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

