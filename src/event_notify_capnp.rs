// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: event/event_notify.capnp


pub mod notify {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <> ::core::marker::Copy for Reader<'_,>  {}
  impl <> ::core::clone::Clone for Reader<'_,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <> ::capnp::traits::HasTypeId for Reader<'_,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <> ::core::fmt::Debug for Reader<'_,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <> Reader<'_,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::event_notify_capnp::notify::NotifyType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn get_player_seat(self) -> ::core::result::Result<crate::winds_capnp::Wind,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn get_tile(self) -> ::core::result::Result<crate::tile_capnp::Tile,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.reader.get_data_field::<u16>(2))
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <> ::capnp::traits::HasStructSize for Builder<'_,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 1, pointers: 0 };
  }
  impl <> ::capnp::traits::HasTypeId for Builder<'_,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <> ::capnp::traits::SetterInput<Owned<>> for Reader<'_,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_type(self) -> ::core::result::Result<crate::event_notify_capnp::notify::NotifyType,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(0))
    }
    #[inline]
    pub fn set_type(&mut self, value: crate::event_notify_capnp::notify::NotifyType)  {
      self.builder.set_data_field::<u16>(0, value as u16);
    }
    #[inline]
    pub fn get_player_seat(self) -> ::core::result::Result<crate::winds_capnp::Wind,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(1))
    }
    #[inline]
    pub fn set_player_seat(&mut self, value: crate::winds_capnp::Wind)  {
      self.builder.set_data_field::<u16>(1, value as u16);
    }
    #[inline]
    pub fn get_tile(self) -> ::core::result::Result<crate::tile_capnp::Tile,::capnp::NotInSchema> {
      ::core::convert::TryInto::try_into(self.builder.get_data_field::<u16>(2))
    }
    #[inline]
    pub fn set_tile(&mut self, value: crate::tile_capnp::Tile)  {
      self.builder.set_data_field::<u16>(2, value as u16);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 68] = [
      ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
      ::capnp::word(153, 163, 90, 205, 229, 249, 9, 204),
      ::capnp::word(25, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(245, 193, 70, 42, 255, 149, 155, 180),
      ::capnp::word(0, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(21, 0, 0, 0, 2, 1, 0, 0),
      ::capnp::word(33, 0, 0, 0, 23, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(45, 0, 0, 0, 175, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(101, 118, 101, 110, 116, 47, 101, 118),
      ::capnp::word(101, 110, 116, 95, 110, 111, 116, 105),
      ::capnp::word(102, 121, 46, 99, 97, 112, 110, 112),
      ::capnp::word(58, 78, 111, 116, 105, 102, 121, 0),
      ::capnp::word(4, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(48, 253, 211, 103, 136, 69, 48, 249),
      ::capnp::word(1, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(78, 111, 116, 105, 102, 121, 84, 121),
      ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
      ::capnp::word(12, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(64, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(76, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(73, 0, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(72, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(81, 0, 0, 0, 42, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 0, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 0, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 121, 112, 101, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(48, 253, 211, 103, 136, 69, 48, 249),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 108, 97, 121, 101, 114, 83, 101),
      ::capnp::word(97, 116, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(240, 137, 193, 189, 154, 134, 198, 159),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 105, 108, 101, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(79, 244, 241, 191, 255, 78, 231, 254),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <crate::event_notify_capnp::notify::NotifyType as ::capnp::introspect::Introspect>::introspect(),
        1 => <crate::winds_capnp::Wind as ::capnp::introspect::Introspect>::introspect(),
        2 => <crate::tile_capnp::Tile as ::capnp::introspect::Introspect>::introspect(),
        _ => panic!("invalid field index {}", index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,2,0];
    pub const TYPE_ID: u64 = 0xcc09_f9e5_cd5a_a399;
  }

  #[repr(u16)]
  #[derive(Clone, Copy, Debug, PartialEq, Eq)]
  pub enum NotifyType {
    AwaitingUserAction = 0,
    TileDiscarded = 1,
    TileDrawnWall = 2,
    TileDrawnDeadWall = 3,
    RiichiDeclared = 4,
    KanCalled = 5,
    PonCalled = 6,
    ChiCalled = 7,
    RonCalled = 8,
    TsumoCalled = 9,
    RiichiAvailable = 10,
    KanAvailable = 11,
    PonAvailable = 12,
    ChiAvailable = 13,
    RonAvailable = 14,
    TsumoAvailable = 15,
    Dora = 16,
  }

  impl ::capnp::introspect::Introspect for NotifyType {
    fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Enum(::capnp::introspect::RawEnumSchema { encoded_node: &notify_type::ENCODED_NODE, annotation_types: notify_type::get_annotation_types }).into() }
  }
  impl ::core::convert::From<NotifyType> for ::capnp::dynamic_value::Reader<'_> {
    fn from(e: NotifyType) -> Self { ::capnp::dynamic_value::Enum::new(e.into(), ::capnp::introspect::RawEnumSchema { encoded_node: &notify_type::ENCODED_NODE, annotation_types: notify_type::get_annotation_types }.into()).into() }
  }
  impl ::core::convert::TryFrom<u16> for NotifyType {
    type Error = ::capnp::NotInSchema;
    fn try_from(value: u16) -> ::core::result::Result<Self, <NotifyType as ::core::convert::TryFrom<u16>>::Error> {
      match value {
        0 => ::core::result::Result::Ok(Self::AwaitingUserAction),
        1 => ::core::result::Result::Ok(Self::TileDiscarded),
        2 => ::core::result::Result::Ok(Self::TileDrawnWall),
        3 => ::core::result::Result::Ok(Self::TileDrawnDeadWall),
        4 => ::core::result::Result::Ok(Self::RiichiDeclared),
        5 => ::core::result::Result::Ok(Self::KanCalled),
        6 => ::core::result::Result::Ok(Self::PonCalled),
        7 => ::core::result::Result::Ok(Self::ChiCalled),
        8 => ::core::result::Result::Ok(Self::RonCalled),
        9 => ::core::result::Result::Ok(Self::TsumoCalled),
        10 => ::core::result::Result::Ok(Self::RiichiAvailable),
        11 => ::core::result::Result::Ok(Self::KanAvailable),
        12 => ::core::result::Result::Ok(Self::PonAvailable),
        13 => ::core::result::Result::Ok(Self::ChiAvailable),
        14 => ::core::result::Result::Ok(Self::RonAvailable),
        15 => ::core::result::Result::Ok(Self::TsumoAvailable),
        16 => ::core::result::Result::Ok(Self::Dora),
        n => ::core::result::Result::Err(::capnp::NotInSchema(n)),
      }
    }
  }
  impl From<NotifyType> for u16 {
    #[inline]
    fn from(x: NotifyType) -> u16 { x as u16 }
  }
  impl ::capnp::traits::HasTypeId for NotifyType {
    const TYPE_ID: u64 = 0xf930_4588_67d3_fd30u64;
  }
  mod notify_type {
  pub static ENCODED_NODE: [::capnp::Word; 106] = [
    ::capnp::word(0, 0, 0, 0, 5, 0, 6, 0),
    ::capnp::word(48, 253, 211, 103, 136, 69, 48, 249),
    ::capnp::word(32, 0, 0, 0, 2, 0, 0, 0),
    ::capnp::word(153, 163, 90, 205, 229, 249, 9, 204),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(21, 0, 0, 0, 90, 1, 0, 0),
    ::capnp::word(41, 0, 0, 0, 7, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(37, 0, 0, 0, 159, 1, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(101, 118, 101, 110, 116, 47, 101, 118),
    ::capnp::word(101, 110, 116, 95, 110, 111, 116, 105),
    ::capnp::word(102, 121, 46, 99, 97, 112, 110, 112),
    ::capnp::word(58, 78, 111, 116, 105, 102, 121, 46),
    ::capnp::word(78, 111, 116, 105, 102, 121, 84, 121),
    ::capnp::word(112, 101, 0, 0, 0, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
    ::capnp::word(68, 0, 0, 0, 1, 0, 2, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(197, 0, 0, 0, 154, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(197, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(2, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(193, 0, 0, 0, 114, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(3, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(189, 0, 0, 0, 146, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(4, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(189, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(5, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(185, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(6, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(181, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(177, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(173, 0, 0, 0, 82, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(169, 0, 0, 0, 98, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(10, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(165, 0, 0, 0, 130, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(11, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(161, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(12, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(157, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(153, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(14, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(149, 0, 0, 0, 106, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(15, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(145, 0, 0, 0, 122, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(16, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(141, 0, 0, 0, 42, 0, 0, 0),
    ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(97, 119, 97, 105, 116, 105, 110, 103),
    ::capnp::word(85, 115, 101, 114, 65, 99, 116, 105),
    ::capnp::word(111, 110, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 105, 108, 101, 68, 105, 115, 99),
    ::capnp::word(97, 114, 100, 101, 100, 0, 0, 0),
    ::capnp::word(116, 105, 108, 101, 68, 114, 97, 119),
    ::capnp::word(110, 87, 97, 108, 108, 0, 0, 0),
    ::capnp::word(116, 105, 108, 101, 68, 114, 97, 119),
    ::capnp::word(110, 68, 101, 97, 100, 87, 97, 108),
    ::capnp::word(108, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 105, 105, 99, 104, 105, 68, 101),
    ::capnp::word(99, 108, 97, 114, 101, 100, 0, 0),
    ::capnp::word(107, 97, 110, 67, 97, 108, 108, 101),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(112, 111, 110, 67, 97, 108, 108, 101),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(99, 104, 105, 67, 97, 108, 108, 101),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(114, 111, 110, 67, 97, 108, 108, 101),
    ::capnp::word(100, 0, 0, 0, 0, 0, 0, 0),
    ::capnp::word(116, 115, 117, 109, 111, 67, 97, 108),
    ::capnp::word(108, 101, 100, 0, 0, 0, 0, 0),
    ::capnp::word(114, 105, 105, 99, 104, 105, 65, 118),
    ::capnp::word(97, 105, 108, 97, 98, 108, 101, 0),
    ::capnp::word(107, 97, 110, 65, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(112, 111, 110, 65, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(99, 104, 105, 65, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(114, 111, 110, 65, 118, 97, 105, 108),
    ::capnp::word(97, 98, 108, 101, 0, 0, 0, 0),
    ::capnp::word(116, 115, 117, 109, 111, 65, 118, 97),
    ::capnp::word(105, 108, 97, 98, 108, 101, 0, 0),
    ::capnp::word(100, 111, 114, 97, 0, 0, 0, 0),
  ];
  pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
    panic!("invalid annotation indices ({:?}, {}) ", child_index, index)
  }
  }
}
