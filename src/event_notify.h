// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: event_notify.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "../tile/tile.capnp.h"
#include "../winds.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(cc09f9e5cd5aa399);
CAPNP_DECLARE_SCHEMA(f930458867d3fd30);
enum class NotifyType_f930458867d3fd30: uint16_t {
  AWAITING_USER_ACTION,
  TILE_DISCARDED,
  TILE_DRAWN_WALL,
  TILE_DRAWN_DEAD_WALL,
  RIICHI_DECLARED,
  KAN_CALLED,
  PON_CALLED,
  CHI_CALLED,
  RON_CALLED,
  TSUMO_CALLED,
  RIICHI_AVAILABLE,
  KAN_AVAILABLE,
  PON_AVAILABLE,
  CHI_AVAILABLE,
  RON_AVAILABLE,
  TSUMO_AVAILABLE,
  DORA,
};
CAPNP_DECLARE_ENUM(NotifyType, f930458867d3fd30);

}  // namespace schemas
}  // namespace capnp


struct Notify {
  Notify() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::NotifyType_f930458867d3fd30 NotifyType;


  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cc09f9e5cd5aa399, 1, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Notify::Reader {
public:
  typedef Notify Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::Notify::NotifyType getType() const;

  inline  ::Wind getPlayerSeat() const;

  inline  ::Tile getTile() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Notify::Builder {
public:
  typedef Notify Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::Notify::NotifyType getType();
  inline void setType( ::Notify::NotifyType value);

  inline  ::Wind getPlayerSeat();
  inline void setPlayerSeat( ::Wind value);

  inline  ::Tile getTile();
  inline void setTile( ::Tile value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Notify::Pipeline {
public:
  typedef Notify Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline  ::Notify::NotifyType Notify::Reader::getType() const {
  return _reader.getDataField< ::Notify::NotifyType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::Notify::NotifyType Notify::Builder::getType() {
  return _builder.getDataField< ::Notify::NotifyType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Notify::Builder::setType( ::Notify::NotifyType value) {
  _builder.setDataField< ::Notify::NotifyType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::Wind Notify::Reader::getPlayerSeat() const {
  return _reader.getDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::Wind Notify::Builder::getPlayerSeat() {
  return _builder.getDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Notify::Builder::setPlayerSeat( ::Wind value) {
  _builder.setDataField< ::Wind>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::Tile Notify::Reader::getTile() const {
  return _reader.getDataField< ::Tile>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::Tile Notify::Builder::getTile() {
  return _builder.getDataField< ::Tile>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Notify::Builder::setTile( ::Tile value) {
  _builder.setDataField< ::Tile>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

