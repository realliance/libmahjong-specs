// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: game_complete.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

#include "queue_request.capnp.h"

CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(fd32c1ee91d3113f);
CAPNP_DECLARE_SCHEMA(8c62b2c2ed35c3a8);

}  // namespace schemas
}  // namespace capnp


struct PlayerGameResult {
  PlayerGameResult() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fd32c1ee91d3113f, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct GameComplete {
  GameComplete() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8c62b2c2ed35c3a8, 3, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class PlayerGameResult::Reader {
public:
  typedef PlayerGameResult Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId() const;
  inline  ::capnp::Text::Reader getPlayerId() const;

  inline  ::uint32_t getRank() const;

  inline  ::uint32_t getPoints() const;

  inline bool hasOldRating() const;
  inline  ::PlayerRating::Reader getOldRating() const;

  inline bool hasNewRating() const;
  inline  ::PlayerRating::Reader getNewRating() const;

  inline double getRatingDelta() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class PlayerGameResult::Builder {
public:
  typedef PlayerGameResult Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPlayerId();
  inline  ::capnp::Text::Builder getPlayerId();
  inline void setPlayerId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPlayerId(unsigned int size);
  inline void adoptPlayerId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPlayerId();

  inline  ::uint32_t getRank();
  inline void setRank( ::uint32_t value);

  inline  ::uint32_t getPoints();
  inline void setPoints( ::uint32_t value);

  inline bool hasOldRating();
  inline  ::PlayerRating::Builder getOldRating();
  inline void setOldRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initOldRating();
  inline void adoptOldRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownOldRating();

  inline bool hasNewRating();
  inline  ::PlayerRating::Builder getNewRating();
  inline void setNewRating( ::PlayerRating::Reader value);
  inline  ::PlayerRating::Builder initNewRating();
  inline void adoptNewRating(::capnp::Orphan< ::PlayerRating>&& value);
  inline ::capnp::Orphan< ::PlayerRating> disownNewRating();

  inline double getRatingDelta();
  inline void setRatingDelta(double value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class PlayerGameResult::Pipeline {
public:
  typedef PlayerGameResult Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::PlayerRating::Pipeline getOldRating();
  inline  ::PlayerRating::Pipeline getNewRating();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class GameComplete::Reader {
public:
  typedef GameComplete Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasGameId() const;
  inline  ::capnp::Data::Reader getGameId() const;

  inline  ::uint64_t getTimestampMs() const;

  inline bool hasPlayerResults() const;
  inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Reader getPlayerResults() const;

  inline  ::uint64_t getStartTimeMs() const;

  inline  ::uint64_t getEndTimeMs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class GameComplete::Builder {
public:
  typedef GameComplete Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasGameId();
  inline  ::capnp::Data::Builder getGameId();
  inline void setGameId( ::capnp::Data::Reader value);
  inline  ::capnp::Data::Builder initGameId(unsigned int size);
  inline void adoptGameId(::capnp::Orphan< ::capnp::Data>&& value);
  inline ::capnp::Orphan< ::capnp::Data> disownGameId();

  inline  ::uint64_t getTimestampMs();
  inline void setTimestampMs( ::uint64_t value);

  inline bool hasPlayerResults();
  inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Builder getPlayerResults();
  inline void setPlayerResults( ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Builder initPlayerResults(unsigned int size);
  inline void adoptPlayerResults(::capnp::Orphan< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>> disownPlayerResults();

  inline  ::uint64_t getStartTimeMs();
  inline void setStartTimeMs( ::uint64_t value);

  inline  ::uint64_t getEndTimeMs();
  inline void setEndTimeMs( ::uint64_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class GameComplete::Pipeline {
public:
  typedef GameComplete Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline bool PlayerGameResult::Reader::hasPlayerId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerGameResult::Builder::hasPlayerId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader PlayerGameResult::Reader::getPlayerId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder PlayerGameResult::Builder::getPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void PlayerGameResult::Builder::setPlayerId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder PlayerGameResult::Builder::initPlayerId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void PlayerGameResult::Builder::adoptPlayerId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> PlayerGameResult::Builder::disownPlayerId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t PlayerGameResult::Reader::getRank() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlayerGameResult::Builder::getRank() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void PlayerGameResult::Builder::setRank( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t PlayerGameResult::Reader::getPoints() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t PlayerGameResult::Builder::getPoints() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerGameResult::Builder::setPoints( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool PlayerGameResult::Reader::hasOldRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerGameResult::Builder::hasOldRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader PlayerGameResult::Reader::getOldRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder PlayerGameResult::Builder::getOldRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline PlayerGameResult::Pipeline::getOldRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void PlayerGameResult::Builder::setOldRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder PlayerGameResult::Builder::initOldRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void PlayerGameResult::Builder::adoptOldRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> PlayerGameResult::Builder::disownOldRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool PlayerGameResult::Reader::hasNewRating() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool PlayerGameResult::Builder::hasNewRating() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::PlayerRating::Reader PlayerGameResult::Reader::getNewRating() const {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::PlayerRating::Builder PlayerGameResult::Builder::getNewRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::PlayerRating::Pipeline PlayerGameResult::Pipeline::getNewRating() {
  return  ::PlayerRating::Pipeline(_typeless.getPointerField(2));
}
#endif  // !CAPNP_LITE
inline void PlayerGameResult::Builder::setNewRating( ::PlayerRating::Reader value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::PlayerRating::Builder PlayerGameResult::Builder::initNewRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void PlayerGameResult::Builder::adoptNewRating(
    ::capnp::Orphan< ::PlayerRating>&& value) {
  ::capnp::_::PointerHelpers< ::PlayerRating>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::PlayerRating> PlayerGameResult::Builder::disownNewRating() {
  return ::capnp::_::PointerHelpers< ::PlayerRating>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline double PlayerGameResult::Reader::getRatingDelta() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline double PlayerGameResult::Builder::getRatingDelta() {
  return _builder.getDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void PlayerGameResult::Builder::setRatingDelta(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool GameComplete::Reader::hasGameId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool GameComplete::Builder::hasGameId() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Data::Reader GameComplete::Reader::getGameId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Data::Builder GameComplete::Builder::getGameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void GameComplete::Builder::setGameId( ::capnp::Data::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Data::Builder GameComplete::Builder::initGameId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void GameComplete::Builder::adoptGameId(
    ::capnp::Orphan< ::capnp::Data>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Data>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Data> GameComplete::Builder::disownGameId() {
  return ::capnp::_::PointerHelpers< ::capnp::Data>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint64_t GameComplete::Reader::getTimestampMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GameComplete::Builder::getTimestampMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void GameComplete::Builder::setTimestampMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool GameComplete::Reader::hasPlayerResults() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool GameComplete::Builder::hasPlayerResults() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Reader GameComplete::Reader::getPlayerResults() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Builder GameComplete::Builder::getPlayerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void GameComplete::Builder::setPlayerResults( ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>::Builder GameComplete::Builder::initPlayerResults(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void GameComplete::Builder::adoptPlayerResults(
    ::capnp::Orphan< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>> GameComplete::Builder::disownPlayerResults() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::PlayerGameResult,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::uint64_t GameComplete::Reader::getStartTimeMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GameComplete::Builder::getStartTimeMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void GameComplete::Builder::setStartTimeMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint64_t GameComplete::Reader::getEndTimeMs() const {
  return _reader.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint64_t GameComplete::Builder::getEndTimeMs() {
  return _builder.getDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void GameComplete::Builder::setEndTimeMs( ::uint64_t value) {
  _builder.setDataField< ::uint64_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}


CAPNP_END_HEADER

