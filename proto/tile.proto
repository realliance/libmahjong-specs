syntax="proto3";

package libmahjong2.tile;

/// Tiles are represented numerically where in a byte,
///the first 2 are blank, the next two are the suit (or indicates honor), 
///and the last 4 are the rank (which after 10 includes other tiles such as Red fives)
enum Tile {
  NONE = 0x00;
  PIN_ONE = 0x01;
  PIN_TWO = 0x02;
  PIN_THREE = 0x03;
  PIN_FOUR = 0x04;
  PIN_FIVE = 0x05;
  PIN_SIX = 0x06;
  PIN_SEVEN = 0x07;
  PIN_EIGHT = 0x08;
  PIN_NINE = 0x09;
  PIN_RED_FIVE = 0x0A;
  SOU_ONE = 0x11;
  SOU_TWO = 0x12;
  SOU_THREE = 0x13;
  SOU_FOUR = 0x14;
  SOU_FIVE = 0x15;
  SOU_SIX = 0x16;
  SOU_SEVEN = 0x17;
  SOU_EIGHT = 0x18;
  SOU_NINE = 0x19;
  SOU_RED_FIVE = 0x1A;
  MAN_ONE = 0x21;
  MAN_FOUR = 0x24;
  MAN_FIVE = 0x25;
  MAN_SIX = 0x26;
  MAN_SEVEN = 0x27;
  MAN_EIGHT = 0x28;
  MAN_NINE = 0x29;
  MAN_RED_FIVE = 0x2A;
  HONOR_EAST = 0x31;
  HONOR_SOUTH = 0x32;
  HONOR_WEST = 0x33;
  HONOR_NORTH = 0x34;
  HONOR_RED_DRAGON = 0x35;
  HONOR_WHITE_DRAGON = 0x36;
  HONOR_GREEN_DRAGON = 0x37;

  // Special tiles used in hand pattern matching
  
  // The entire list of tile sets are the same suit
  SPECIAL_SAME_SUIT = 0x40;
  // Any red five
  SPECIAL_RED_FIVE = 0x41;
  // The current prevailing wind
  SPECIAL_PREVAILING_WIND = 0x42;
  // The current seat wind
  SPECIAL_SEAT_WIND = 0x43;
  // Any pin tile
  SPECIAL_PIN = 0x44;
  // Any sou tile
  SPECIAL_SOU = 0x45;
  // Any man tile
  SPECIAL_MAN = 0x46;
  // Green Tile
  SPECIAL_GREEN = 0x47;
  // Dragon Tile
  SPECIAL_DRAGON = 0x48;
  // Unique Dragon Tile
  SPECIAL_UNIQUE_DRAGON = 0x49;
  // Any honor tile
  SPECIAL_HONOR = 0x4A;
  // Any not Honor
  SPECIAL_NOT_HONOR = 0x4B;
  // Not terminal or honor
  SPECIAL_NOT_TERMINAL_OR_HONOR = 0x4C;
  // Terminal or honor
  SPECIAL_TERMINAL_OR_HONOR = 0x4D;
  /// Unique Suit Set
  SPECIAL_UNIQUE_SUIT = 0x4E;
  /// Unique Honor Set
  SPECIAL_UNIQUE_HONOR = 0x4F;  
  // Any tile
  SPECIAL_ANY = 0x50;
  // Any one tile
  SPECIAL_SUITED_ONE = 0x51;
  // Any two tiles
  SPECIAL_SUITED_TWO = 0x52;
  // Any three tiles
  SPECIAL_SUITED_THREE = 0x53;
  // Any four tiles
  SPECIAL_SUITED_FOUR = 0x54;
  // Any five tiles
  SPECIAL_SUITED_FIVE = 0x55;
  // Any six tiles
  SPECIAL_SUITED_SIX = 0x56;
  // Any seven tiles
  SPECIAL_SUITED_SEVEN = 0x57;
  // Any eight tiles
  SPECIAL_SUITED_EIGHT = 0x58;
  // Any nine tiles
  SPECIAL_SUITED_NINE = 0x59;
  // Any terminal
  SPECIAL_SUITED_TERMINAL = 0x5A;
  // Any terminal (not suited)
  SPECIAL_TERMINAL = 0x5B;
  // Same suit and numberic
  SPECIAL_SAME_SUIT_AND_NUMERIC = 0x5C;
  // Unique terminal or honor
  SPECIAL_UNIQUE_TERMINAL_OR_HONOR = 0x5D;
  // Unique wind
  SPECIAL_UNIQUE_WIND = 0x5E;
}

/// Represents the type of a tile set
enum TileSetType {
  /// All tiles in the set are identical
  IDENTICAL = 0;
  /// All tiles in the set are in sequence
  SEQUENCE = 1;
  /// The set contains a certain number of the reference tile
  CONTAINS = 2;
}

/// Represents a group of tiles, used in hand composition and scoring
message TileSet {
  /// The reference tile of the set. Usually the first (or only type) in the set
  Tile reference_tile = 1;
  /// The type of the set
  TileSetType tile_set_type = 2;
  /// The number of tiles in the set
  uint32 set_count = 3;
  /// For a contains, the number of tiles that need to match the reference tile. If not set, it is the same as set_count.
  optional uint32 contains_count = 4;
  /// For hands that can be pon or kan, this is the maximum size of the set.
  optional uint32 max_size = 5;
  /// Whether this set is concealed
  optional bool concealed = 6;
}

